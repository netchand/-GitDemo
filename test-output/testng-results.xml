<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="3" total="13" passed="9" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-11-23T13:18:40 IST" name="Loan Department" finished-at="2020-11-23T13:18:41 IST" duration-ms="170">
    <groups>
      <group name="Smoke">
        <method signature="Day2.ploan()[pri:0, instance:test.Day2@290d210d]" name="ploan" class="test.Day2"/>
        <method signature="Day4.MobileLoginHomeLoan()[pri:0, instance:test.Day4@10db82ae]" name="MobileLoginHomeLoan" class="test.Day4"/>
      </group> <!-- Smoke -->
    </groups>
    <test started-at="2020-11-23T13:18:40 IST" name="Car Loan" finished-at="2020-11-23T13:18:41 IST" duration-ms="170">
      <class name="test.Day3">
        <test-method is-config="true" signature="BFsuite()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="BFsuite" finished-at="2020-11-23T13:18:40 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BFsuite -->
        <test-method is-config="true" signature="beforeclass()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="beforeclass" finished-at="2020-11-23T13:18:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeclass -->
        <test-method is-config="true" signature="beforevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="beforevery" finished-at="2020-11-23T13:18:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforevery -->
        <test-method signature="MobileSingoutcarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="MobileSingoutcarLoan" data-provider="getData" finished-at="2020-11-23T13:18:40 IST" duration-ms="46" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[nc]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[pwd]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileSingoutcarLoan -->
        <test-method is-config="true" signature="afterevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="afterevery" finished-at="2020-11-23T13:18:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterevery -->
        <test-method is-config="true" signature="beforevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="beforevery" finished-at="2020-11-23T13:18:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforevery -->
        <test-method signature="MobileSingoutcarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="MobileSingoutcarLoan" data-provider="getData" finished-at="2020-11-23T13:18:40 IST" duration-ms="23" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[th]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[pwd1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileSingoutcarLoan -->
        <test-method is-config="true" signature="afterevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="afterevery" finished-at="2020-11-23T13:18:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterevery -->
        <test-method is-config="true" signature="beforevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="beforevery" finished-at="2020-11-23T13:18:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforevery -->
        <test-method signature="MobileSingoutcarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:40 IST" name="MobileSingoutcarLoan" data-provider="getData" finished-at="2020-11-23T13:18:41 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[rg]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ugh]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileSingoutcarLoan -->
        <test-method is-config="true" signature="afterevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="afterevery" finished-at="2020-11-23T13:18:41 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterevery -->
        <test-method is-config="true" signature="beforevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="beforevery" finished-at="2020-11-23T13:18:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforevery -->
        <test-method signature="WebloginCarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="WebloginCarLoan" finished-at="2020-11-23T13:18:41 IST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[qaclickacademy.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123456]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebloginCarLoan -->
        <test-method is-config="true" signature="afterevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="afterevery" finished-at="2020-11-23T13:18:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterevery -->
        <test-method is-config="true" signature="beforevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="beforevery" finished-at="2020-11-23T13:18:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforevery -->
        <test-method signature="LoginAPICarLoan()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="LoginAPICarLoan" finished-at="2020-11-23T13:18:41 IST" depends-on-methods="test.Day3.WebloginCarLoan" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginAPICarLoan -->
        <test-method is-config="true" signature="afterevery()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="afterevery" finished-at="2020-11-23T13:18:41 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterevery -->
        <test-method is-config="true" signature="afterclass()[pri:0, instance:test.Day3@1a04f701]" started-at="2020-11-23T13:18:41 IST" name="afterclass" finished-at="2020-11-23T13:18:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterclass -->
      </class> <!-- test.Day3 -->
      <class name="test.dayone1">
        <test-method is-config="true" signature="BFsuite()[pri:0, instance:test.dayone1@78dd667e]" started-at="2020-11-23T13:18:41 IST" name="BFsuite" finished-at="2020-11-23T13:18:41 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BFsuite -->
      </class> <!-- test.dayone1 -->
    </test> <!-- Car Loan -->
    <test started-at="2020-11-23T13:18:40 IST" name="Personal loan" finished-at="2020-11-23T13:18:40 IST" duration-ms="119">
      <class name="test.Day2">
        <test-method is-config="true" signature="prerequiste()[pri:0, instance:test.Day2@290d210d]" started-at="2020-11-23T13:18:40 IST" name="prerequiste" finished-at="2020-11-23T13:18:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prerequiste -->
        <test-method signature="ploan()[pri:0, instance:test.Day2@290d210d]" started-at="2020-11-23T13:18:40 IST" name="ploan" finished-at="2020-11-23T13:18:40 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ploan -->
      </class> <!-- test.Day2 -->
      <class name="test.Day4">
        <test-method signature="LoginAPIHomeLoan()[pri:0, instance:test.Day4@10db82ae]" started-at="2020-11-23T13:18:40 IST" name="LoginAPIHomeLoan" finished-at="2020-11-23T13:18:40 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginAPIHomeLoan -->
        <test-method signature="MobileLoginHomeLoan()[pri:0, instance:test.Day4@10db82ae]" started-at="2020-11-23T13:18:40 IST" name="MobileLoginHomeLoan" finished-at="2020-11-23T13:18:40 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLoginHomeLoan -->
        <test-method signature="WebloginHomeLoan()[pri:0, instance:test.Day4@10db82ae]" started-at="2020-11-23T13:18:40 IST" name="WebloginHomeLoan" finished-at="2020-11-23T13:18:40 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebloginHomeLoan -->
      </class> <!-- test.Day4 -->
      <class name="test.dayone1">
        <test-method signature="Demo()[pri:0, instance:test.dayone1@78dd667e]" started-at="2020-11-23T13:18:40 IST" name="Demo" finished-at="2020-11-23T13:18:40 IST" duration-ms="13" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:968)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at test.dayone1.Demo(dayone1.java:26)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:821)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Demo -->
        <test-method is-config="true" signature="lastexecution()[pri:0, instance:test.dayone1@78dd667e]" started-at="2020-11-23T13:18:40 IST" name="lastexecution" finished-at="2020-11-23T13:18:40 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lastexecution -->
      </class> <!-- test.dayone1 -->
    </test> <!-- Personal loan -->
  </suite> <!-- Loan Department -->
</testng-results>
